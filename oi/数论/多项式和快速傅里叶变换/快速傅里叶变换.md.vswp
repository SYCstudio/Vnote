vnote_backup_file_826537664 /home/syc/文档/vnote_notebooks/oi/数论/多项式和快速傅里叶变换/快速傅里叶变换.md
# 快速傅里叶变换
## FFT
非预处理单位根
```cpp
void FFT(complex<ld> *P,int opt)
{
	for (int i=0;i<N;i++) if (i<Rader[i]) swap(P[i],P[Rader[i]]);
	for (int i=1;i<N;i<<=1)
	{
		complex<ld> dw(cos(Pi/i),sin(Pi/i)*opt);
		int l=i<<1;
		for (int j=0;j<N;j+=l)
		{
			complex<ld> w(1,0);
			for (int k=0;k<i;k++,w*=dw)
			{
				complex<ld> X=P[j+k],Y=w*P[j+k+i];
				P[j+k]=X+Y;P[j+k+i]=X-Y;
			}
		}
	}
	if (opt==-1) for (int i=0;i<N;i++) P[i].real()=P[i].real()/N+0.5;
	return;
}
```

单位根预处理 更快
```cpp
预处理:
for (int i=0;i<N;i++) Wn[i]=complex<ld>(cos(2*Pi*i/N),sin(2*Pi*i/N)),Iwn[i]=conj(Wn[i]);
FFT:
void FFT(complex<ld> *P,int N,const int opt)
{
	for (int i=0;i<N;i++) if (i<Rader[i]) swap(P[i],P[Rader[i]]);
	for (int i=1;i<N;i<<=1)
	{
		int l=i<<1;
		complex<ld> dw(cos(Pi/i),sin(Pi/i)*opt);
		for (int j=0;j<N;j+=l)
		{
			complex<ld> w(1,0);
			for (int k=0;k<i;k++,w*=dw)
			{
				complex<ld> X=P[j+k],Y=w*P[j+k+i];
				P[j+k]=X+Y;P[j+k+i]=X-Y;
			}
		}
	}
	return;
}
```
## NTT
要求模数为形如$2^r+1$的质数，因为要求要能把$phi(mod)$分解为$2$的若干次幂的部分

```cpp
void NTT(ll *P,int N,int opt)
{
	for (int i=0;i<N;i++) if (i<Rader[i]) swap(P[i],P[Rader[i]]);
	for (int i=1;i<N;i<<=1)
	{
		int l=i<<1;
		ll dw=QPow(G,(Mod-1)/l);
		if (opt==-1) dw=QPow(dw,Mod-2);
		for (int j=0;j<N;j+=l)
		{
			ll w=1;
			for (int k=0;k<i;k++,w=w*dw%Mod)
			{
				ll X=P[j+k],Y=w*P[j+k+i]%Mod;
				P[j+k]=(X+Y)%Mod;P[j+k+i]=(X-Y+Mod)%Mod;
			}
		}
	}
	if (opt==-1)
	{
		ll inv=QPow(N,Mod-2);
		for (int i=0;i<N;i++) P[i]=P[i]*inv%Mod;
	}
	return;
}
```
当然亦可以预预处理

## 任意模数NTT
有两种方法，一种是拆分成三个能直接$NTT$的模数来做，然后用中国剩余定理来合并答案。  
另一种是$MTT$