vnote_backup_file_826537664 /home/syc/文档/vnote_notebooks/oi/Algorithm/动态规划/数位动态规划/[SCOI2014]方伯伯的商场之旅.md
# [SCOI2014]方伯伯的商场之旅
[BZOJ3598 Luogu3286]

方伯伯有一天去参加一个商场举办的游戏。商场派了一些工作人员排成一行。每个人面前有几堆石子。  
说来也巧，位置在 i 的人面前的第 j 堆的石子的数量，刚好是 i 写成 K 进制后的第 j 位。现在方伯伯要玩一个游戏，商场会给方伯伯两个整数 L,R。  
方伯伯要把位置在 [L, R] 中的每个人的石子都合并成一堆石子。每次操作，他可以选择一个人面前的两堆石子，将其中的一堆中的某些石子移动到另一堆，代价是移动的石子数量 * 移动的距离。  
商场承诺，方伯伯只要完成任务，就给他一些椰子，代价越小，给他的椰子越多。所以方伯伯很着急，想请你告诉他最少的代价是多少。例如：10 进制下的位置在 12312 的人，合并石子的最少代价为：1 * 2 + 2 * 1 + 3 * 0 + 1 * 1 + 2 * 2 = 9即把所有的石子都合并在第三堆。

不妨先计算出把所有石子移动到最高位的代价，从高位向低位 DP ，设 F[i][sum][0/1] 表示前 i 位和为 sum 时所有方案的贡献，那么选择往后面转移一个数 x ，这个数的贡献就是 x(i-1) 。然后考虑如何构造出最优方案。因为对于每一个数来说，其代价关于合并到的那对石子的位置是一个单峰函数，现在的任务就是要求使得每一个数都移动到谷底。考虑计算把集合位置从 i 移动到 i+1 的贡献，与原来相比，左边的多贡献了，而右边少贡献了。考虑枚举集合位置改变的地方， DP 出有多少数这样移动一下更优，同样设 F[i][sum][0/1] 表示前 i 位和为 sum 时的减少的贡献，注意这里转移的时候只有 sum 大于 0 的才能记录进贡献。  
由于转移与 sum 是否大于 0 相关，需要知道最后的 sum 的值，所以为了方便起见，可以采用记忆化搜索的方式。

```cpp
#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<algorithm>
using namespace std;

#define ll long long
#define mem(Arr,x) memset(Arr,x,sizeof(Arr))

const int maxN=60;
const int maxSum=2510;
const int Mid=1000;
const int inf=2147483647;

int B;
ll F[2][maxN][maxSum];
int len,Num[maxN];

ll Calc(ll Up);
ll dfs1(int u,int sum,int limit);
ll dfs2(int u,int sum,int mid,int limit);

int main(){
	ll L,R;
	scanf("%lld%lld%d",&L,&R,&B);
	printf("%lld\n",Calc(R)-Calc(L-1));

	return 0;
}

ll Calc(ll Up){
	len=0;
	while (Up) Num[++len]=Up%B,Up/=B;
	reverse(&Num[1],&Num[len+1]);
	mem(F,-1);
	ll ret=dfs1(1,0,0);
	for (int i=1;i<len;i++){
		mem(F,-1);
		ret-=dfs2(1,0,i,0);
	}
	return ret;
}

ll dfs1(int u,int sum,int limit){
	if (u==len+1) return sum;
	if (F[limit][u][sum]!=-1) return F[limit][u][sum];
	ll ret=0;
	for (int i=0;i<=((limit)?(B-1):(Num[u]));i++)
		ret+=dfs1(u+1,sum+(u-1)*i,(limit)|(i<Num[u]));
	return F[limit][u][sum]=ret;
}

ll dfs2(int u,int sum,int mid,int limit){
	if (u==len+1) return max(sum,0);
	if (F[limit][u][sum+Mid]!=-1) return F[limit][u][sum+Mid];
	ll ret=0;
	for (int i=0;i<=((limit)?(B-1):(Num[u]));i++)
		ret+=dfs2(u+1,sum+((u<=mid)?(-i):(i)),mid,(limit)|(i<Num[u]));
	return F[limit][u][sum+Mid]=ret;
}
```